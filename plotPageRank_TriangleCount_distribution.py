# -*- coding: utf-8 -*-
"""plotBDRP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1baZOC3mGr3zywXUQXuVlD2-tvqv3ZMwk
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

pagerank_filenames = ["Epinions", "Facebook", "Github", "Slashdot-2018", "Slashdot-2019", "Twitter",
                      "2,79.txt", "3,47.txt", "4,07.txt", "4,36.txt", "4,48.txt", "4,5.txt", "4,61.txt",
                      "4,67.txt", "4,82.txt"]

title = ["Epinions", "Facebook", "Github", "Slashdot-2018", "Slashdot-2019", "Twitter",
         "alpha=2.79", "alpha=3.47", "alpha=4.07", "alpha=4.36", "alpha=4.48", "alpha=4.5",
         "alpha=4.61", "alpha=4.67", "alpha=4.82"]
x = 0
y = 0
title_index = 0
fig, axs = plt.subplots(3,3, figsize=(20,20))
for filename in pagerank_filenames:
  df = pd.read_csv("pagerank/"+filename, sep=",")
  df.columns = ["vertex", "pagerank"]
  pagerank_dist = {}
  for i,j in zip(df["vertex"], df["pagerank"]):
    pagerank_dist[i[1:]] = float(j[:-1])

  axs[x, y].hist(pagerank_dist.values(), color = 'red', edgecolor = 'black', bins = 100)
  axs[x, y].set_xlabel("Page rank distribution", fontsize=12)
  axs[x, y].set_ylabel("Number of vertex", fontsize=12)
  axs[x, y].set_yscale('log')
  axs[x, y].set_title(title[title_index])
  title_index+=1
  y+=1;
  if(y==3):
    x+=1
    y=0
plt.show()

trianglecount_filenames = ["Epinions", "Facebook", "Github", "Slashdot-2018", "Slashdot-2019", "Twitter",
                           "2,79.txt", "3,47.txt", "4,07.txt", "4,36.txt", "4,48.txt", "4,5.txt", "4,61.txt",
                           "4,67.txt", "4,82.txt"]

title = ["Epinions", "Facebook", "Github", "Slashdot-2018", "Slashdot-2019", "Twitter",
         "alpha=2.79", "alpha=3.47", "alpha=4.07", "alpha=4.36", "alpha=4.48", "alpha=4.5",
         "alpha=4.61", "alpha=4.67", "alpha=4.82"]


x = 0
y = 0
title_index=0
fig, axs = plt.subplots(3,3, figsize=(20,20))
for filename in trianglecount_filenames:
  df = pd.read_csv("trianglecount/"+filename, sep=",")
  df.columns = ["vertex", "trianglecount"]
  pagerank_dist = {}
  for i,j in zip(df["vertex"], df["trianglecount"]):
    pagerank_dist[i[1:]] = float(j[:-1])

  axs[x, y].hist(pagerank_dist.values(), color = 'red', edgecolor = 'black', bins = 100)
  axs[x, y].set_xlabel("Triangle count distribution", fontsize=12)
  axs[x, y].set_ylabel("Number of vertex", fontsize=12)
  axs[x, y].set_yscale('log')
  axs[x, y].set_title(title[title_index])
  title_index+=1
  y+=1;
  if(y==3):
    x+=1
    y=0
plt.show()

pagerank_time = [6007106526/1000000.0, 2339466631/1000000.0, 2951242077/1000000.0,
                 5112903318/1000000.0, 6128627014/1000000.0, 1820815948/1000000.0, 5666438791/1000000.0]
trianglecount_time = [63377703/1000000.0, 40881996/1000000.0, 26350034/1000000.0,
                      32685131/1000000.0, 32165005/1000000.0, 27815050/1000000.0, 27874814/100000.0]

from matplotlib  import cm
import seaborn as sns
graph_names = ["Twitter", "Facebook", "Github", "Slashdot-2018", "Slashdot-2019", "Epinions"]

node_values = [81306, 22470, 37700, 77360, 82168, 75879]
edge_values = [1342310, 171002, 289003, 546487, 582533, 405740]

plt.figure(figsize=(10,6))
plt.xlabel("Number of nodes", fontsize=14)
plt.ylabel("Number of edges", fontsize=14)
plt.grid(alpha=0.2)
sns.scatterplot(x=node_values, y=edge_values,hue=graph_names, marker='o', s=150)

graph_names = ['alpha=4.38', 'alpha=3.42', 'alpha=2.4', 'alpha=4.06', 'alpha=3.94', 'alpha=3.53', 'alpha=2.31', 'alpha=2.8', 'alpha=4.62', 'alpha=2.36']
nodes = [324, 459, 536, 503, 368, 412, 568, 458, 334, 441]
node_values = [50 * x for x in nodes]
edges = [839, 2232, 3296, 2389, 1073, 1567, 3729, 2162, 1005, 2268]
edge_values = [100 * x for x in edges]

print(node_values)
print(edge_values)
plt.figure(figsize=(10,6))
plt.xlabel("Number of nodes", fontsize=14)
plt.ylabel("Number of edges", fontsize=14)
plt.grid(alpha=0.2)
sns.scatterplot(x=node_values, y=edge_values,hue=graph_names, marker='o', s=150)

original_alpha=[3.3, 3.22, 2.57, 3.53, 3.47, 3.64]
sampled_alpha=[3.06, 3.09, 2.36, 2.99, 5.98, 3.67]
graph_names = ["Twitter", "Facebook", "Github", "Slashdot-2018", "Slashdot-2019", "Epinions"]

plt.figure(figsize=(10,6))
plt.xlabel("Graphs", fontsize=14)
plt.ylabel("Power-law degree, alpha", fontsize=14)
plt.grid(alpha=0.2)

X = np.arange(6)
ax = plt.subplot(111)
ax.bar(X-0.1, original_alpha, width=0.2, align='center', label="Original graph")
ax.bar(X+0.1, sampled_alpha, width=0.2, align='center', label="Sampled graph")
plt.xticks(X,graph_names)
plt.legend()
